# shellcheck shell=bash
#
# ~/.bashrc_custom - il mio file personalizzato per le shell di login con bash.
#
# Ad ogni modifica, ricorda di eseguire "source .bashrc"
#
# Ricorda di aggiungere il seguente codice al file .bashrc
#
# if running bash
# if [ -n "$BASH_VERSION" ]; then
#    # include .profile_custom if it exists (use if -e for symbolic link)
#    if [ -e "$HOME/.profile_custom" ]; then
#        . "$HOME/.profile_custom"
#    fi
# fi

# Nota:
#
# Variabili di shell, visibili sono nella shell corrente, sono create con MYVAR=1729
# Variabili di ambiente, esportarte nei sottoprocessi, sono create con export MYVAR=1729
# Per evitare l'esportazione nel sottoprocesso, export-n MYVAR=1729
# Per cancellare una variabile, unset MYVAR

# Get the system info from /etc/os-release and /usr/lib/os-release
## PRETTY_NAME="Debian GNU/Linux 12 (bookworm)"
## NAME="Debian GNU/Linux"
## VERSION_ID="12"
## VERSION="12 (bookworm)"
## VERSION_CODENAME=bookworm
## ID=debian
. /etc/os-release

# Valori di default delle variabili di XDG BASE DIRECTORY 
# SPECIFICATION, le applicazioni dovrebbero usarli gia e
# non serve impostarli nuovamente. Verifica col comando
#  printenv | grep XDG
#
# XDG_DATA_HOME="$HOME/.local/share"  # user-specific data files
# XDG_CONFIG_HOME="$HOME/.config"     # user-specific config files
# XDG_STATE_HOME="$HOME/.local/state" # user-specific state data
# XDG_CACHE_HOME="$HOME/.cache"       # user-specific cached data
# XDG_DATA_DIRS="/usr/local/share/:/usr/share/" # search for data files
# XDG_CONFIG_DIRS="/etc:/usr/etc:/etc/xdg"      # search for config files
#
# Each XDG variable has a correspondence for multiple values:
# $XDG_DATA_DIRS, $XDG_CONFIG_DIRS, 
#
# Le fix di XDG non rispettate si trovano a questa pagina:
# https://wiki.archlinux.org/title/XDG_Base_Directory

# [[ -v XDG_DATA_HOME ]]         && echo "var XDG_DATA_HOME set TO $XDG_DATA_HOME"             || echo "var XDG_DATA_HOME not set"

unset XDG_DATA_HOME     # "$HOME/.local/share"
unset XDG_CONFIG_HOME   # "$HOME/.config" 
unset XDG_STATE_HOME    # "$HOME/.local/state"
unset XDG_CACHE_HOMEs   # "$HOME/.cache" 

#########################################################
# Default value, overriden in $HOME/.config/my_env.conf #
#########################################################

# set USE_PODMAN=1 if using podman
# Indico che si usa podman al posto di docker
# USE_PODMAN=1                    => invoke podman command
# USE_PODMAN=""                   => invoke docker command
# unset USE_PODMAN                => invoke docker command
export USE_PODMAN=1

# Set the SVN folder 
export MY_SVN_REPO_FOLDER="$HOME/Sviluppo/SVN2"

export NTFY_UUID="aa30e17e-591f-4256-b749-4b9ae0739f85"

# BLADE3 hashing - Set the number of threads
export RAYON_NUM_THREADS=4

# Ignore global and system config of Git
export GIT_CONFIG_NOSYSTEM=1 # Ignore /etc/gitconfig
export GIT_CONFIG_NOGLOBAL=1 # Ignore ~/.gitconfig

# Set the allowed characters in filename
# Used in function grepRgRemoveUnallowedCharacters()
export ALLOWED_CHARS_IN_FILENAME=" .-_)("

unset GRADLE_HOME        # "/usr/lib/gradle/gradle-8.14.2"
unset CORDOVA_JAVA_HOME  # "/usr/lib/jvm/java-17-openjdk-amd64"
unset NODE_HOME          # "/usr/lib/node/node-24-x64"
unset ANDROID_HOME       # "$HOME/Sviluppo/AndroidSDK"
unset ANDROID_SDK_ROOT   # "$HOME/Sviluppo/AndroidSDK"
unset GAM_HOME           # "$HOME/Sviluppo/GAM"
unset GAMCFGDIR          # "${XDG_CONFIG_HOME:="$HOME/.config"}/GAMConfig"
unset GAMWORKINGDIR      # "${XDG_DATA_HOME:="$HOME/.local/share"}/GAMWorkingDir"

# Overwrite default options for specific environment
###
### For example, sets
### RAYON_NUM_THREADS=1
###
if [ -f "$HOME/.config/my_env.conf" ]; then
  . "$HOME/.config/my_env.conf"
fi

# Use this command to check if a var is set or not
# [[ -v GRADLE_HOME ]]         && echo "var GRADLE_HOME set TO $GRADLE_HOME"             || echo "var GRADLE_HOME not set"
# [[ -v CORDOVA_JAVA_HOME ]]   && echo "var CORDOVA_JAVA_HOME set TO $CORDOVA_JAVA_HOME" || echo "var CORDOVA_JAVA_HOME not set"
# [[ -v NODE_HOME ]]           && echo "var NODE_HOME set TO $NODE_HOME"                 || echo "var NODE_HOME not set"
# [[ -v ANDROID_HOME ]]        && echo "var ANDROID_HOME set TO $ANDROID_HOME"           || echo "var ANDROID_HOME not set"
# [[ -v ANDROID_SDK_ROOT ]]    && echo "var ANDROID_SDK_ROOT set TO $ANDROID_SDK_ROOT"   || echo "var ANDROID_SDK_ROOT not set"

###############################
# Custom commands and options #
###############################

MY_DOT_FILES_FOLDER="$MY_SVN_REPO_FOLDER/codingepaduli/static/static/openSource/DebianFirstConfig/user"

if [ -f "$MY_DOT_FILES_FOLDER/bash_functions" ] && [ -r "$MY_DOT_FILES_FOLDER/bash_functions" ]; then
  . "$MY_DOT_FILES_FOLDER/bash_functions"
fi

if [ -f "$MY_DOT_FILES_FOLDER/bash_functions_extra" ] && [ -r "$MY_DOT_FILES_FOLDER/bash_functions_extra" ]; then
  . "$MY_DOT_FILES_FOLDER/bash_functions_extra"
fi

if [ -f "$MY_DOT_FILES_FOLDER/bash_functions_docker" ] && [ -r "$MY_DOT_FILES_FOLDER/bash_functions_docker" ]; then
  . "$MY_DOT_FILES_FOLDER/bash_functions_docker"
fi

# Aggiungo JAVA_HOME="/usr/lib/jvm/java-17-openjdk-amd64"
JAVA_INSTALLED="$(which java)"
if [ -z "$JAVA_INSTALLED" ]; then
    echo "Java not installed"
else
    # Search the path with the command
    # readlink -ze $(which java) | xargs -0 dirname 
    JAVA_HOME=$(readlink -ze "$(which java)" | xargs -0 dirname | xargs -0 dirname)
    export JAVA_HOME

    # Only if needed
    # export PATH="$PATH:$JAVA_HOME/bin"

    # Fix XDG BASE DIRECTORY SPECIFICATION non rispettata per JAVA
    export _JAVA_OPTIONS="-Djava.util.prefs.userRoot=${XDG_CONFIG_HOME:="$HOME/.config"}/java"
    export _JAVA_OPTIONS="-Djavafx.cachedir=${XDG_CACHE_HOME:="$HOME/.cache"}/openjfx"
fi

# Imposto l'editor predefinito
if [ -f "/usr/bin/micro" ]; then
    export EDITOR="/usr/bin/micro"
fi

# Se la lunghezza di stringa è diversa da zero ed è una directory esistente
if [[ -n "$GRADLE_HOME" && -d "$GRADLE_HOME" ]]; then

  # Aggiungo Gradle al PATH
  export PATH="$PATH:$GRADLE_HOME/bin/"

  # Fix XDG BASE DIRECTORY SPECIFICATION non rispettata per Gradle
  GRADLE_USER_HOME="${XDG_DATA_HOME:="$HOME/.local/share"}/.gradle"
  export GRADLE_USER_HOME
fi

# Aggiungo l'SDK di Android al PATH
if [[ -n "$ANDROID_HOME" && -d "$ANDROID_HOME" ]]; then
    export ANDROID_HOME="$HOME/Sviluppo/AndroidSDK"
    export ANDROID_SDK_ROOT="$HOME/Sviluppo/AndroidSDK"

    export PATH="$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin"
    export PATH="$PATH:$ANDROID_SDK_ROOT/emulator"
    export PATH="$PATH:$ANDROID_SDK_ROOT/platform-tools"
    export PATH="$PATH:$ANDROID_SDK_ROOT/build-tools"
fi

if [[ -n "$GAM_HOME" && -d "$GAM_HOME" ]]; then
    # Aggiungo Google Admin Manager al PATH
    export PATH="$PATH:$GAM_HOME/gam7/bin"
    alias gam="$GAM_HOME/gam7/gam"
fi

# NODE 
export NODENV_ROOT="${XDG_DATA_HOME:="$HOME/.local/share"}/nodenv" 
export NODE_REPL_HISTORY="${XDG_DATA_HOME:="$HOME/.local/share"}/node_repl_history"
export NPM_CONFIG_USERCONFIG="${XDG_CONFIG_HOME:="$HOME/.config"}/npm/npmrc"
# The file $XDG_CONFIG_HOME/npm/npmrc should contains these variables:
## prefix=${XDG_DATA_HOME}/npm
## cache=${XDG_CACHE_HOME}/npm
## init-module=${XDG_CONFIG_HOME}/npm/config/npm-init.js
## logs-dir=${XDG_STATE_HOME}/npm/logs

# SQLITE
export SQLITE_HISTORY="${XDG_STATE_HOME:="$HOME/.local/state"}/sqlite_history"

# PYTHON
export PYTHON_HISTORY="${XDG_STATE_HOME:="$HOME/.local/state"}/python_history"
export PYTHONPYCACHEPREFIX="${XDG_CACHE_HOME:="$HOME/.cache"}/python"
export PYTHONUSERBASE="${XDG_DATA_HOME:="$HOME/.local/share"}/python"

# tealdeer (TLDR client) config DIR
export TEALDEER_CONFIG_DIR=="${XDG_CONFIG_HOME:="$HOME/.config"}/tealdeer/config.toml"

# Oh my bash
export OSH="${XDG_DATA_HOME:="$HOME/.local/share"}/oh-my-bash";
export DISABLE_AUTO_UPDATE=true #oh-my-bash

