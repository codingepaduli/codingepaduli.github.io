# shellcheck shell=bash
#
# ~/.bashrc_custom - il mio file personalizzato per le shell di login con bash.
#
# Ad ogni modifica, ricorda di eseguire "source .bashrc"
#
# Ricorda di aggiungere il seguente codice al file .bashrc
#
# if running bash
# if [ -n "$BASH_VERSION" ]; then
#    # include .profile_custom if it exists (use if -e for symbolic link)
#    if [ -e "$HOME/.profile_custom" ]; then
#        . "$HOME/.profile_custom"
#    fi
# fi

# Sync these variables with config_environment
MY_SVN_REPO_FOLDER="$HOME/Sviluppo/SVN2"
MY_DOT_FILES_FOLDER="$MY_SVN_REPO_FOLDER/codingepaduli/static/static/openSource/DebianFirstConfig/user"

if [ -f "$MY_DOT_FILES_FOLDER/bash_functions" ] && [ -r "$MY_DOT_FILES_FOLDER/bash_functions" ]; then
    . "$MY_DOT_FILES_FOLDER/bash_functions"
fi

if [ -f "$MY_DOT_FILES_FOLDER/bash_functions_extra" ] && [ -r "$MY_DOT_FILES_FOLDER/bash_functions_extra" ]; then
    . "$MY_DOT_FILES_FOLDER/bash_functions_extra"
fi

if [ -f "$MY_DOT_FILES_FOLDER/bash_functions_docker" ] && [ -r "$MY_DOT_FILES_FOLDER/bash_functions_docker" ]; then
    . "$MY_DOT_FILES_FOLDER/bash_functions_docker"
fi

# BLADE3 hashing - Set the number of threads
RAYON_NUM_THREADS=4
export RAYON_NUM_THREADS

# Ignore global and system config
GIT_CONFIG_NOSYSTEM=1 # Ignore /etc/gitconfig
GIT_CONFIG_NOGLOBAL=1 # Ignore ~/.gitconfig
export GIT_CONFIG_NOSYSTEM
export GIT_CONFIG_NOGLOBAL

# Aggiungo JAVA_HOME="/usr/lib/jvm/java-17-openjdk-amd64"
JAVA_INSTALLED="$(which java)"
if [ -z "$JAVA_INSTALLED" ]; then
    echo "Java not installed"
else
    # Search the path with the command
    # readlink -ze $(which java) | xargs -0 dirname 
    JAVA_HOME=$(readlink -ze "$(which java)" | xargs -0 dirname | xargs -0 dirname)
    export JAVA_HOME

    # Only if needed
    # export PATH="$PATH:$JAVA_HOME/bin"
fi

# Imposto l'editor predefinito
if [ -f "/usr/bin/micro" ]; then
    export EDITOR="/usr/bin/micro"
fi

# Aggiungo Gradle al PATH
if [ -d "/opt/gradle/gradle-8.0" ]; then
  export GRADLE_HOME="/opt/gradle/gradle-8.0"
  export PATH="$PATH:$GRADLE_HOME/bin/"

  # Fix XDG BASE DIRECTORY SPECIFICATION non rispettata per Gradle
  GRADLE_USER_HOME="${XDG_DATA_HOME:="$HOME/.local/share"}/.gradle"
  export GRADLE_USER_HOME
fi

# Aggiungo Apache Cordova al PATH
if [ -d "/usr/lib/jvm/java-11-openjdk-amd64" ]; then
  # set in place of JAVA_HOME, to be used specifically for Cordova development
  export CORDOVA_JAVA_HOME="/usr/lib/jvm/java-11-openjdk-amd64"
fi

# Aggiungo l'SDK di Android al PATH
if [ -d "$HOME/Sviluppo/AndroidSDK" ]; then
    export ANDROID_HOME="$HOME/Sviluppo/AndroidSDK"
    export ANDROID_SDK_ROOT="$HOME/Sviluppo/AndroidSDK"

    export PATH="$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin"
    export PATH="$PATH:$ANDROID_SDK_ROOT/emulator/"
    export PATH="$PATH:$ANDROID_SDK_ROOT/platform-tools/"
    export PATH="$PATH:$ANDROID_SDK_ROOT/build-tools/"
fi

# Valori di default delle variabili di XDG BASE DIRECTORY 
# SPECIFICATION, le applicazioni dovrebbero usarli gia e
# non serve impostarli nuovamente. Verifica col comando
#  printenv | grep XDG
#
# XDG_DATA_HOME="$HOME/.local/share"  # user-specific data files
# XDG_CONFIG_HOME="$HOME/.config"     # user-specific config files
# XDG_STATE_HOME="$HOME/.local/state" # user-specific state data
# XDG_CACHE_HOME="$HOME/.cache"       # user-specific cached data
# XDG_DATA_DIRS="/usr/local/share/:/usr/share/" # search for data files
# XDG_CONFIG_DIRS="/etc:/usr/etc:/etc/xdg"      # search for config files
#
# Each XDG variable has a corrispondence for multiple values:
# $XDG_DATA_DIRS, $XDG_CONFIG_DIRS, 
#
# Le fix di XDG non rispettate si trovano a questa pagina:
# https://wiki.archlinux.org/title/XDG_Base_Directory
