# shellcheck shell=bash
#
# From the bash manual page: For almost every purpose
# aliases are superseded by shell functions.

## See the Bash-Builtins like "alias" and "declare" at:
## https://www.gnu.org/software/bash/manual/bash.html#Bash-Builtins

# In order to avoid a function calls itself, you can specify
# to execute the original command. Example: to call the 'clear'
# command insede a function "clear", you need to use:
#   command clear;

# Show the rows -rw------- 1 io casa 15491 2023-08-17 14:35 file
# Usage: ll
ll() {
  ls -l --time-style long-iso "$@"
}
export -f ll

# Show the rows -rw------- 1 io casa 1 2023-08-17 14:35 28DA-CAD7 -> ../../sda1
# Usage: lsDisksUUID
lsDisksUUID() {
  ll -l /dev/disk/by-uuid "$@"
}
export -f lsDisksUUID

#alias la='ls -A' # show hidden files BUT NOT "." and ".."
#alias lc='ls -C' # show quoted file name (between aphostrophe)
#alias lh='ls --human' # bytes measured as human readable
#alias lt='ls -t' # sort by last modification
#alias lx='ls -X' # sort by extension
#alias lx='ls -R' # list recursively

# Use stat file for file information (instead of ls file)
# Options:
##  %a access right (octal) | %A access right (human readable)
##  %s total size (in bytes)
##  %F file type
##  %n file name      | %N quoted file name with dereference if symbolic link
##  %u user ID        | %U user name
##  %g group ID       | %G group name
# Usage: stat file.txt
stat() {
  command stat --printf="%U %G %s %n \n" "$@"
}
export -f stat

# clear screen
# Usage: cls
cls() {
  clear;
}
export -f cls

# clear screen
# Usage: clear
clear() {
  timeout 2 cmatrix -u 2;
  command clear;
}
export -f clear

# extract tar files (tar -C ./myfolder -xvf file.tar)
# Usage: untar file.txt.tar
untar() {
  tar -xvf "$@"
}
export -f untar

# extract compressed zip files (tar -C ./myfolder -zxvf file.tar.gz)
# Usage: untar file.txt.zip
untarz() {
  tar -zxvf "$@"
}
export -f untarz

# elimina con wipe (sovrascrive N volte, f=force no confirmation, r=recoursive, i=verbose mode, q=quick wipe)
# Usage: wipe file.txt
wipe() {
  command wipe -friq "$@"
}
export -f wipe

# TLDR
# Usage: tldr ls
tldr() {
  tldr-py find "$@"
}
export -f tldr

# cancella e salva (clear and write) la history dei comandi del terminale
# Usage: clearhistory
clearhistory() {
  history -c -w
}
export -f clearhistory

# show all the services (use restart to restart all)
# Usage: services
services() {
  systemctl status "$@"
}
export -f services

# Linux distribution name
distroName() {
  lsb_release -si # short format distribution name (debian)
}
export -f distroName

# Linux distribution name
distroReleaseName() {
  lsb_release -sc # short format distribution release name (bullseye - bookworm)
}
export -f distroReleaseName

# Linux distribution release number
distroReleaseNumber() {
  lsb_release -sr # short format distribution release number (11 - 12)
}
export -f distroReleaseNumber

# show the distro's info, the cpu, the mounted devices and the memory status
# Usage: computer
computer() {
  lsb_release -a
  lscpu
  df -h
  free -h
}
export -f computer

# show the computer space 
## -h human readable
## -d nested directories to show
## -t treshold in byte (smaller files will be excluded)
# Usage: homespace
homespace() {
  du -h -d 2 -t 9999 | sort -h
}
export -f homespace

# Show user defined functions
# Usage: userDefinedFunctions
userDefinedFunctions() {
  declare -F
}
export -f userDefinedFunctions

# Show user biggest file in current dir
# Usage: biggestFiles
biggestFiles() {
  find . -type f  -exec  du -Sh {} +  |  sort -rh  |  head -n 50
}
export -f biggestFiles

biggestDir() {
  du -a .  |  sort -n -r  |  head -n 50
}
export -f biggestDir

####################################
# VLC - Metadata Extraction Tool   #
####################################

# Auto reconnect to the server when connection drops
# Usage: vlcStreamingWithAutoReconnection file.m3u
vlcStreamingWithAutoReconnection() {
  vlc --loop --repeat --http-reconnect --http-continuous  --fullscreen "$@"
}
export -f vlcStreamingWithAutoReconnection

##########################################
# Exif Tool - Metadata Extraction Tool   #
##########################################

exifToolScriptWindows() {
  echo "script Windows"
# @REM script Windows per cancellare tutti i TAG tranne l'orientamento pagina in tutti i file jpg ricorsivamente 
# @REM -recurse       -> ricorsione sulla directory indicata  
# @REM -ext jpg       -> tutti i file con estensione jpg (case insensitive)
# @REM -all=" "       -> scrive in tutti i tag il valore vuoto
# @REM -overwrite_original -> sovrascrive gli originali
# @REM -tagsFromFile  -> copia uno o piu tag da un file "sorgente"
# @REM   Si usa con -tagsFromFile FILE_SRC TAG_DA_COPIARE
# @REM     "%d%f.%e_original" -> indica il file sorgente. E' formato da:
# @REM       %d directory del file in elaborazione
# @REM       %f nome del file in elaborazione
# @REM       %e estensione del file in elaborazione
# @REM -Orientation -> Il tag orientamento
# @REM . la directory corrente in cui prendere i files ricorsivamente
# @REM path to exif tool
# SET EXIF_EXE="C:\Program Files (x86)\ExifTool\exiftool.exe"

# %EXIF_EXE% -recurse -ext jpg -overwrite_original -all="" -tagsFromFile "%%d%%f.%%e" -Orientation  .

#   Nota: in windows shell il carattere % e' un carattere speciale, per evitarlo si doppia %%
}
export -f exifToolScriptWindows

# Usage: exiftoolShowFileInfo file.mp4
# Usage: exiftoolShowFileInfo *.mp4
exiftoolShowFileInfo() {
  exiftool "$@"
}
export -f exiftoolShowFileInfo

# Usage: exiftoolCloneFileWithoutMetadata file.mp4
# Usage: exiftoolCloneFileWithoutMetadata *.mp4
#### Create the backup file file_original.mp4 ####
exiftoolCloneFileWithoutMetadata() {
  exiftool -all=   "$@"
}
export -f exiftoolCloneFileWithoutMetadata

# Usage: exiftoolOverwriteFileRemovingMetadata file.mp4
# Usage: exiftoolOverwriteFileRemovingMetadata *.mp4
exiftoolOverwriteFileRemovingMetadata() {
  exiftool -overwrite_original -all=   "$@"
}
export -f exiftoolOverwriteFileRemovingMetadata

##########################################
# Ricerca e sostituzione testo nei files #
##########################################

# visualizza tutti i file contenenti il testo
# Usage: grepSearch "testo"
grepSearch() {
  grep -H -e "$@" ./*
}
export -f grepSearch

# visualizza ricorsivamente tutti i file contenenti il testo
# Usage: grepRecursiveSearch "testo" .
grepRecursiveSearch() {
  grep --include "*" --recursive "$@"
}
export -f grepRecursiveSearch

# Usa ripgrep per effettuare una sostituzione
# Usage: command | grepRgReplace "testo1" "testo2"
grepRgReplace() {
  ## -N: ingnora i file nascosti
  ## --passthru: restituisce anche le righe che non corrispondono 
  ## -r: pattern di ricerca
  rg -N --passthru "$1" -r "$2" 
}
export -f grepRgReplace

# Usa tr per effettuare una sostituzione
# Usage: command | grepReplaceLowerWithUpper
grepReplaceLowerWithUpper() {
  tr '[:lower:]' '[:upper:]'
}
export -f grepReplaceLowerWithUpper

# Usa tr per effettuare una sostituzione
# Usage: command | grepReplaceUpperWithLower
grepReplaceUpperWithLower() {
  tr '[:upper:]' '[:lower:]'
}
export -f grepReplaceUpperWithLower

######################################################
# Hashing functions (sha256, sha512, md5 and Blade3) #
######################################################

# SHA-512 hash checker
# Usage: sha512check *.sha512
sha512check() {
  shasum --quiet --warn -a 512 --check "$@"
}
export -f sha512check

# SHA-256 hash checker
# Usage: sha256check *.sha256
sha256check() {
  shasum --quiet --warn -a 256 --check "$@"
}
export -f sha256check

# MD5 hash checker
# Usage: md5check *.md5
md5check() {
  # BUG md5sum's option --quiet and --warn are incompatible
  # https://lists.gnu.org/r/bug-coreutils/2010-10/msg00104.html
  md5sum --quiet --check "$@"
}
export -f md5check

# Blade3 hash checker (multi-thread)
# Usage: b3check *.b3
b3check() {
  #  - OPTION --num-threads is set by variable RAYON_NUM_THREADS
  #  No needs of b3sum --num-threads 16 file.txt file.txt.b3 
  b3sum --quiet --check "$@"
}
export -f b3check

# Make .iso.md5 files from .iso files
# Usage: md5HashingAllIsoFiles
md5HashingAllIsoFiles() {
  
  # nullglob: if there is no file, don't output anything
  # nocaseglob: will match *.m4a, *.M4a, *.m4A etc
  shopt -s nullglob nocaseglob

  while IFS= read -r fileIso
  do
    if [ -f "$fileIso.md5" ]; then
      echo "    Md5 hash exists: $fileIso.md5"
    else
      echo "    $(date) - Hashing (MD5) $fileIso"
      touch "$fileIso.md5"
      md5sum "$fileIso" > "$fileIso.md5"
    fi
  done < <(ls ./*.iso)
}
export -f md5HashingAllIsoFiles

# Make .iso.b3 files from .iso files
# Usage: blake3HashingAllIsoFiles
blake3HashingAllIsoFiles() {
  
  # nullglob: if there is no file, don't output anything
  # nocaseglob: will match *.m4a, *.M4a, *.m4A etc
  shopt -s nullglob nocaseglob

  while IFS= read -r fileIso
  do
    if [ -f "$fileIso.b3" ]; then
      echo "    b3 hash exists: $fileIso.b3"
    else
      echo "    $(date) - Hashing (b3) $fileIso"
      touch "$fileIso.b3"
      b3sum "$fileIso" > "$fileIso.b3"
    fi
  done < <(ls ./*.iso)
}
export -f blake3HashingAllIsoFiles

# Make .iso.sha256 files from .iso files
# Usage: sha256HashingAllIsoFiles
sha256HashingAllIsoFiles() {
  
  # nullglob: if there is no file, don't output anything
  # nocaseglob: will match *.m4a, *.M4a, *.m4A etc
  shopt -s nullglob nocaseglob

  while IFS= read -r fileIso
  do
    if [ -f "$fileIso.sha256" ]; then
      echo "    sha256 hash exists: $fileIso.sha256"
    else
      echo "    $(date) - Hashing (sha256) $fileIso"
      touch "$fileIso.sha256"
      sha256sum "$fileIso" > "$fileIso.sha256"
    fi
  done < <(ls ./*.iso)
}
export -f sha256HashingAllIsoFiles

## rhash - calculate recoursive hash:
## rhash --md5 --recursive  --verbose --output=checksum.md5 *

# Make a report of file status against the file checksum.md5
# Usage: md5VerboseReport --file=checksum.md5
md5VerboseReport() {
  ## --batch : non interactive mode
  ## --check : check the hashes
  ## --type : check the hash type MD5, sha256 or sha512
  digup --batch --check --type=md5 "$@"
}
export -f md5VerboseReport

# Make a report of file status against the file checksum.md5
# Usage: md5Report --file=checksum.md5
md5Report() {
  ## --modified : print only "new", "CHANGED" or deleted file
  md5VerboseReport --modified "$@"
}
export -f md5Report

########################
#        ntfy          #
########################

# - max (5) - Really long vibration bursts, default notification sound with a pop-over notification.
# - high (4) - Long vibration burst, default notification sound with a pop-over notification.
# - default (3) -  Short default vibration and sound. Default notification behavior.
# - low (2) -  No vibration or sound. Notification will not visibly show up until notification drawer is pulled down.
# - min (1) -  No vibration or sound. The notification will be under the fold in "Other notifications".

NTFY_PRIORITY_MAX="max"
NTFY_PRIORITY_HIGH="high"
NTFY_PRIORITY_DEFAULT="default"
NTFY_PRIORITY_LOW="low"
NTFY_PRIORITY_MIN="min"

NTFY_TAG_MAX="skull_and_crossbones" # ☠️
NTFY_TAG_HIGH="warning,radioactive" # ⚠️☢️
NTFY_TAG_DEFAULT="bell" # 🔔
NTFY_TAG_LOW="speech_balloon" # 💬
NTFY_TAG_MIN="x" #  ❌

export NTFY_PRIORITY_MAX
export NTFY_PRIORITY_HIGH
export NTFY_PRIORITY_DEFAULT
export NTFY_PRIORITY_LOW
export NTFY_PRIORITY_MIN

export NTFY_TAG_MAX
export NTFY_TAG_HIGH
export NTFY_TAG_DEFAULT
export NTFY_TAG_LOW
export NTFY_TAG_MIN

ntfy() {
  if [ "$#" -lt "2" ] || [ "$#" -gt "3" ]; then
    echo "please use:";
    echo " ntfy \"title\" \"message\" ";
    echo " ntfy \"title\"\"message\" \"priority\" ";
    return 0
  fi

  defaultTitle=""
  defaultMsg=""
  
  # $1 if not empty, defualt value if $1 is empty or unset
  title=${1:-$defaultTitle}

  # $2 if not empty, defualt value if $2 is empty or unset
  msg=${2:-$defaultMsg}

  # $3 if not empty, defualt value if $3 is empty or unset
  priority=${3:-$NTFY_PRIORITY_DEFAULT}
  tag=${3:-$NTFY_TAG_DEFAULT}

  # Linked tags:
  if [ "$priority" = "$NTFY_PRIORITY_MAX" ]; then tag="$NTFY_TAG_MAX"; fi
  if [ "$priority" = "$NTFY_PRIORITY_HIGH" ]; then tag="$NTFY_TAG_HIGH"; fi
  if [ "$priority" = "$NTFY_PRIORITY_DEFAULT" ]; then tag="$NTFY_TAG_DEFAULT"; fi
  if [ "$priority" = "$NTFY_PRIORITY_LOW" ]; then tag="$NTFY_TAG_LOW"; fi
  if [ "$priority" = "$NTFY_PRIORITY_MIN" ]; then tag="$NTFY_TAG_MIN"; fi
  
  curl -H "Title: $title" -H "Priority: $priority" -H "Tags: $tag" -d "$msg" ntfy.sh/$NTFY_UUID
}
export -f ntfy

########################
#         ufw          #
########################

# Show denied connections
# Usage: ufwDeniedConnectionsLog
ufwDeniedConnectionsLog() {
  grep --invert-match "UFW ALLOW" "/var/log/ufw.log"
}
export -f ufwDeniedConnectionsLog

########################
#      network         #
########################

# resume a download if something go wrong
# Usage: wget https://google.it
wget() {
  command wget -c "$@"
}
export -f wget

# ping only 5 times
# Usage: ping https://google.it
ping() {
  command ping -c 5 "$@"
}
export -f ping

# On windows: tracepath -b twitter.com
# Usage: traceroute https://google.it
traceroute() {
  command traceroute "$@"
}
export -f traceroute

# display the ports # (TU=TPC/UDP, L=show LISTEN state, PN=Process id/process Name)
ports() {
  netstat -tulpn
}
export -f ports

# show all sockets (A=all; L=listening; T=TCP; P=related process)
socketStatus() {
  ss -plat
}
export -f socketStatus

# display the interfaces, the status and the ip
interfaceList() {
  ip -br -c address
}
export -f interfaceList

# display the interfaces, the status and the ip
interfaceList2() {
  nmcli device status
}
export -f interfaceList2

# Show the network manager
showNetworkManager() {
  nmtui
}
export -f showNetworkManager

# Set the hostname: hostnamectl set-hostname host.domain.org
setHostnameControl() {
  hostnamectl 'set-hostname'
}
export -f setHostnameControl

interfaceWifiUp() {
  ip link set wlan0 up
}
export -f interfaceWifiUp

interfaceWifiDown() {
  ip link set wlan0 down
}
export -f interfaceWifiDown

interfaceEthUp() {
  ip link set eth0 up
}
export -f interfaceEthUp

interfaceEthDown() {
  ip link set eth0 down
}
export -f interfaceEthDown

interfaceLoAddAddress() {
  ip address add 127.0.0.2/16 dev lo
}
export -f interfaceLoAddAddress

interfaceLoRemoveAddress() {
  ip address delete 127.0.0.2/16 dev lo
}
export -f interfaceLoRemoveAddress

interfaceEthArpOn() {
  ip link set dev eth0 arp on
}
export -f interfaceEthArpOn

interfaceEthArpOff() {
  ip link set dev eth0 arp off
}
export -f interfaceEthArpOff

ipRoutingTable() {
  ip route
}
export -f ipRoutingTable

# Indica IP di un nome di dominio
## Usa: host -t a nomeDominio.com
hostGetIpFromName() {
  host -t a "$@"
}
export -f hostGetIpFromName

# Indica IP di un nome di dominio
## Usa: whois IP
whoisGetIpInformation() {
  whois "$@"
}
export -f whoisGetIpInformation

# scan ports 22,80,443 on network from 192.168.1.0 to 192.168.1.255
# Options:
#   -L      List all targets in the network
#   -O      Operation System Detection
#   -p      list of ports to test
#   -sV      detect software version for each port
scanNetwork() {
  nmap -p 22,80,443  192.168.1.0-255
}
export -f scanNetwork

########################
#          Git         #
########################

# See the log format: https://devhints.io/git-log-format
# https://github.com/git/git/blob/56d268bafff7538f82c01d3c9c07bdc54b2993b1/Documentation/pretty-formats.txt

gitLog() {
  git log --pretty="format:%h %G? %cn %ce %s" --graph --decorate --abbrev-commit --all  "$@"
}
export -f gitLog

gitLogFiles() {
  git log --pretty=oneline --decorate --abbrev-commit --name-only "$@"
}
export -f gitLogFiles

# search a string in the repository
# -n show line number
# -i search ignorecase
# --untracked search in tracked (committed) and untracked files
gitGrep() {
  git grep --untracked -n -i "$@"
}
export -f gitGrep

# Check the status of all repository
gitStatusOfAllRepo() {
  endColor='\033[0m]'
  foregroundColor='35' 
  backgroundColor='44'
  boldStyle='1'
  color="\033[${boldStyle};${foregroundColor};${backgroundColor}m"

  # nullglob: if there is no file, don't output anything
  # nocaseglob: will match *.m4a, *.M4a, *.m4A etc
  shopt -s nullglob nocaseglob

  while IFS= read -r repo
  do
    # SC2103 – ShellCheck Wiki - Use a ( subshell ) to avoid having to cd back.
    # You can run commands in a subshell using parenthesis ( command )
    (
      cd "$repo" || exit
      echo -e "${color} ${PWD} \033[0m"

      # Verifico se è un repo git
      if [ -d ".git" ]; then
        git status --short --branch
        # git pull origin
      fi
    ) # close subshell
  done < <(ls -d ./*/)
}
export -f gitStatusOfAllRepo

# Updates all repository
gitUpdateAllRepo() {
  endColor='\033[0m]'
  foregroundColor='35' 
  backgroundColor='44'
  boldStyle='1'
  color="\033[${boldStyle};${foregroundColor};${backgroundColor}m"

  # nullglob: if there is no file, don't output anything
  # nocaseglob: will match *.m4a, *.M4a, *.m4A etc
  shopt -s nullglob nocaseglob

  # Check if ssh-add is running
  if [ -n "$SSH_AGENT_PID" ] && kill -0 "$SSH_AGENT_PID" 2>/dev/null; then
    while IFS= read -r repo
    do
      # SC2103 – ShellCheck Wiki - Use a ( subshell ) to avoid having to cd back.
      # You can run commands in a subshell using parenthesis ( command )
      (
        cd "$repo" || exit
        echo -e "${color} ${PWD} \033[0m"

        # Verifico se è un repo git
        if [ -d ".git" ]; then
          git pull origin
        fi
      ) # close subshell
    done < <(ls -d ./*/)
  else
    echo "run ssh-add"
  fi
}
export -f gitUpdateAllRepo

########################
#         SVN          #
########################

# Revert recursively tracked files from current directory
svnRevertDirectory() {
    svn revert -R ./*
}
export -f svnRevertDirectory

# Remove recursively untracked files from current directory
svnRemoveUntrackedFiles() {
    svn status | grep ^\? | cut -c9- | xargs -d \\n rm -r
}
export -f svnRemoveUntrackedFiles

############################
# VNC server on SSH tunnel #
############################

# Xvnc is both a vnc and X server. Each time you start a server, it will create 
#    a new "display" and starts listening on the following ports:
#    VNC server "display 0" will listen on TCP ports 5800, 5900 and 6000
#    VNC server "display 1" will listen on TCP ports 5801, 5901 and 6001
# The ports are for:
#    5800+N - Java-based vncviewer (VNC client connection over HTTP protocol);
#    5900+N - VNC Client Port (VNC client connection over RemoteFrameBuffer RFB protocol);
#    6000+N - X Server port (port 6001 is to allows X applications to connect to the VNC server).
# check open ports with 'netstat -nalp | grep vnc'

# Options:
#   -rfbport:      The port to listen for VNC Client connections;
#   -httpport      The port for HTTP connections (needed with rfbport)
#   -localhost:    Only allow loopback connections from localhost;
#   -nolisten tcp: Disable X Server connections on TCP port;

# see 'man Xvnc' and 'man Xserver' for more info. 

vncserverStart () {
    vncserver -geometry 1360x730 -rfbport 10901 -httpport 10901 -nolisten tcp -localhost
}
export -f vncserverStart

vncserverStop () {
    vncserver  -kill :1
}
export -f vncserverStop

vncTunnel () {
    ssh -L 5901:127.0.0.1:5901 -C -N -l io 172.20.10.3
}
export -f vncTunnel

############################
# FileSystem Usermode FUSE #
############################

# Show the real devices mounted
# Usage: mountedDevices
mountedDevices() {
    findmnt --df --options rw --real --type ext2,ext3,ext4,ntfs # --noheadings
}

mountPhone() {
    jmtpfs "$HOME/Documenti/Phone"
}
export -f mountPhone

montaPhone() {
    mountPhone
}
export -f montaPhone

umountPhone() {
    fusermount -u "$HOME/Documenti/Phone"
}
export -f umountPhone

smontaPhone() {
    umountPhone
}
export -f smontaPhone

##############################
#          Inkscape          #
##############################

# Test: 
# Run: convertAllSvgToPng
convertAllSvgToPng() {
  # nullglob: if there is no file, don't output anything
  # nocaseglob: will match *.m4a, *.M4a, *.m4A etc
  shopt -s nullglob nocaseglob

  for file in *.svg
  do
    # newFileName=$(echo ${file} | sed 's/.svg.png/.png/g')
    newFileName="${file//.svg.png/.png}"
    echo "exporting $file to $newFileName"
    inkscape -e "$newFileName" "$file"
  done
}
# export -f convertAllSvgToPng

############################
#          FFmpeg          #
############################

# See https://trac.ffmpeg.org/wiki/TitleIndex

# Use ffmpeg -i inputFile outputFile
#
# Options:
#  -vn              disable video conversion 
# -c:a libmp3lame   use the lame Mp3 library
# -c:v copy         don't re-encode video, only copy video
# -ar               Set the audio sampling frequency.
# -ac               Set the number of audio channels
# -q:a Value        The quality argument has a range 0-9 (lower value is higher quality)
#   It sets the variable bit rate, see https://trac.ffmpeg.org/wiki/Encode/MP3
#   - 0-3 will normally produce transparent results
#   - 4 (default) should be close to perceptual transparency
#   - 6 usually produces an "acceptable" quality.

# Audio formats:
#    Lossless and uncompressed: WAV PCM AIFF
#    Lossless and compressed: FLAC ALAC
#    Lossy: WEBM OPUS OGG (Vorbis) MP3 M4A AAC (some implementations not open formats) WMA (not an open format) 

# Today's most widely used open source video formats:
# - The MP4 format, containing H.264 video and AAC audio, used in BluRay and Internet streaming.
# - The WEBM format, containing VP9 video and Opus audio;
# - The Matroska (MKV) container format can contain nearly any combination of video, audio, 
#     and even stereoscopic (3D) imagery. It's the basis for WEBM.

# See container formats here:
# https://trac.ffmpeg.org/wiki/Encode/HighQualityAudio#Containerformats

# For high quality lossy audio encoding
#   see https://trac.ffmpeg.org/wiki/Encode/HighQualityAudio 

# Test: 
# Run: convertAllM4aToMp3
convertAllM4aToMp3() {

  # nullglob: if there is no file, don't output anything
  # nocaseglob: will match *.m4a, *.M4a, *.m4A etc
  shopt -s nullglob nocaseglob

  for file in *.m4a
  do
    
    ffmpeg -i "${file}" -vn -ar 44100 -ac 2 -q:a 2 "new-${file}.mp3";
  done
}
export -f convertAllM4aToMp3

# Test: 
# Run: convertAllWavToMp3
convertAllWavToMp3() {

  # nullglob: if there is no file, don't output anything
  # nocaseglob: will match *.wav, *.Wav, *.WaV etc
  shopt -s nullglob nocaseglob

  for file in *.wav
  do
    ffmpeg -i "${file}" -vn -ar 44100 -ac 2 -q:a 2 "new-${file}.mp3";
  done
}
export -f convertAllWavToMp3

# Test: 
# Run: convertAllWebmToMp4
convertAllWebmToMp4() {

  # nullglob: if there is no file, don't output anything
  # nocaseglob: will match *.wav, *.Wav, *.WaV etc
  shopt -s nullglob nocaseglob

  for file in *.webm
  do
    ffmpeg -i "${file}" -c:v copy "new-${file}.mp4";
  done
}
export -f convertAllWebmToMp4

# Run: convertAllMp4VideoToMp3Audio
convertAllMp4VideoToMp3Audio() {

  # nullglob: if there is no file, don't output anything
  # nocaseglob: will match *.m4a, *.M4a, *.m4A etc
  shopt -s nullglob nocaseglob

  for file in *.mp4
  do
    
    ffmpeg -i "${file}" -vn -ar 44100 -ac 2 -q:a 2 "new-${file}.mp3";
  done
}
export -f convertAllMp4VideoToMp3Audio

# Run: convertAllFlvVideoToMp3Audio
convertAllFlvVideoToMp3Audio() {

  # nullglob: if there is no file, don't output anything
  # nocaseglob: will match *.m4a, *.M4a, *.m4A etc
  shopt -s nullglob nocaseglob

  for file in *.flv
  do
    
    ffmpeg -i "${file}" -vn -ar 44100 -ac 2 -q:a 2 "new-${file}.mp3";
  done
}
export -f convertAllFlvVideoToMp3Audio

# Run: tagAllMp3File
tagAllMp3File()  {

  # nullglob: if there is no file, don't output anything
  # nocaseglob: will match *.m4a, *.M4a, *.m4A etc
  shopt -s nullglob nocaseglob
  
  # eyeD3 --remove-all *.mp3

  for file in *.mp3
  do
    #  \( is an escapes for (
    #  \) is an escapes for ) 
    # () is a match (may need to be escaped \(\), it will be stored
    # The first (.*) is the artist, it will be stored as \1
    # The second (.*) is the title, it will be stored as \2
    # The "\...." is the extension, it will be ignored
    Artist=$(echo "$file" | sed 's/\(.*\) - \(.*\)\..../\1/g')
    Title=$(echo "$file" | sed 's/\(.*\) - \(.*\)\..../\2/g')
    echo "Setting tag ID3 $file: $Artist - $Title"
    # eyeD3 -a "$Artist" -t "$Title" "$file"
  done

}
# export -f tagAllMp3File

########################
# Check files to burn  #
########################

checkFilesToBurn() {

  # Ultimo aggiornamento 2022-06-20
  # 
  # Script che visualizza i file nascosti, i file di cache windows "thumbs.db"
  # ed i file che hanno dei caratteri nel nome che non sono accettabili per noi.
  #
  # News:
  # Versione 1.5 : Ricerca incompatibilità Windows, nomi dei file con piu di 64 caratteri.
  # Versione 1.4 : Ricarca di cartelle annidate per piu di sette livelli
  # Versione 1.3 : Ricerca file di cache windows "thumbs.db".
  # Versione 1.2 : Ricerca file che hanno dei caratteri nel nome non accettabili.
  # Versione 1.1 : Ricerca file con nome che finisce per "tilde" (~).
  # Versione 1.0 : Ricerca file con nome che inizia per "punto" (.).

  # Elenco dei caratteri accettati:
  Alfabetici="a-zA-Z"
  Numerici="0-9"
  Punto="\."
  Spazio="\ "
  Slash="\/"
  Trattino="-"
  Under="_"
  Dollaro='$'

  # Talvolta l'ordine dei caratteri accettati crea confusione nel riconoscimento.
  # Assicurarsi che cio non avvenga.
  Accettati="$Dollaro$Under$Alfabetici$Numerici$Punto$Spazio$Slash$Trattino"

  echo -e "Script che visualizza i file nascosti, i file di cache windows \"thumbs.db\" "
  echo -e "ed i file che hanno dei caratteri nel nome che non sono accettabili per noi. "

  echo -e "\n I file nascosti nelle varie directory e sottodirectory sono: "
  find ./ -regextype posix-egrep -regex "\./.*\/['.'].*$" 
  find ./ -regextype posix-egrep -regex "\./.*~.*"

  echo -e "\n I file Thumbs.db nelle varie directory e sottodirectory sono: "
  find ./ -iname '*thumbs.db'

  echo -e "\n I file che hanno caratteri non accettati sono: "
  find ./ -regextype posix-egrep -regex "\./.*[^$Accettati].*"

  echo -e "\n I file che hanno un nome con più di 64 caratteri sono: "
  find ./ -regextype posix-egrep -regex ".*" | sed 's/^.*\///g' | grep -E "^.{64,}"

  echo -e "\n Le cartelle annidate per piu di 7 livelli sono: "

  elenco=$(find ./ -type d -ls)
  elenco2=$(echo "$elenco" | cut -d\. -f2 | sed "s/[^/]//g")

  numDir=$(echo "$elenco" | wc --lines)

  for i in $(seq 1 "$numDir")
  do
    nomeFile=$(echo "$elenco" | sed -n "$i"p\;"$i"q | cut -d\. -f2) #sed stampa solo la riga i-esima
    numSlash=$(echo "$elenco2" | cut -d\  -f"$i") #Ricerca dell'ennesima riga di slash
    numLivelli=$(echo "$numSlash" | wc --chars)
    echo -e "\"$nomeFile\"*\t*$((numLivelli - 1))livelli." | sed 's/\\//g' | grep -e "8livelli."
  done
}
export -f checkFilesToBurn

########################
# Beautiful interfaces #
########################

# see '/etc/boxes/boxes-config' file or run 'boxes -l' for a list of shapes
# make (or remove with -r option) a boxes with alignment (-a) centered and with shape (-d) dog.
boxes() {
    command boxes -d dog -a c "$@"
}
export -f boxes

# see '/usr/share/cowsay directory' for a list of shapes
# make a cowsay shape with shape (-f) ghostbusters.
cowsay() {
    command cowsay -f ghostbusters "$@"
}
export -f cowsay

#   draw an input text with colors
lolcat() {
    command lolcat "$@"
}
export -f lolcat

#   draw a matrix (the film) screensaver)
cmatrix() {
    cls
}
export -f cmatrix
