# shellcheck shell=bash

################################################
# Functions based on docker apps installed
################################################

# Set in $HOME/.config/my_env.conf
#   unset USE_PODMAN


# A basic docker function
dockerContainer() {
  # For issues, check this options
  # --log-level debug
  # --privileged  
  # --group-add keep-groups
  # --security-opt label=disable
  # --security-opt apparmor=unconfined
  
  # I need these informations from command ``podman info``
  # host:
  #   idMappings:
  #     gidmap:
  #     - container_id: 0
  #       host_id: 2000
  #       size: 1
  #     - container_id: 1
  #       host_id: 165536
  #       size: 65536
  #     uidmap:
  #     - container_id: 0
  #       host_id: 1001
  #       size: 1
  #     - container_id: 1
  #       host_id: 165536
  #       size: 65536
  #
  # I get these from the command:
  #   podman info --format "{{ (index .Host.IDMappings.UIDMap 0).ContainerID }}"
  #   podman info --format "{{ (index .Host.IDMappings.UIDMap 0).HostId }}"
  #   podman info --format "{{ (index .Host.IDMappings.UIDMap 0).Size }}"
  #   podman info --format "{{ (index .Host.IDMappings.UIDMap 1).ContainerID }}"
  #   podman info --format "{{ (index .Host.IDMappings.UIDMap 1).HostId }}"
  #   podman info --format "{{ (index .Host.IDMappings.UIDMap 1).Size }}"
  # Or alternatively from the command:
  #   podman unshare cat /proc/self/uid_map
  #   podman unshare cat /proc/self/gid_map

  my_uid=$(id -u $USER)
  my_gid=$(id -g $USER)

  if [ -z "$USE_PODMAN" ]; then
    docker container run --rm -it -u $my_uid:$my_gid -v "$PWD":"$PWD" -w "$PWD" "$@"
  else
    podman container run --rm -it -u $my_uid:$my_gid --userns keep-id:uid=$my_uid,gid=$my_gid -v "$PWD":"$PWD":Z -w "$PWD" "$@"
  fi
}
export -f dockerContainer

# The gcc compiler
# TEST: dockerGcc --version
# RUN:  dockerGcc -o myapp myapp.c
dockerGcc() {
  dockerContainer --name docker-gcc  gcc:12-bookworm  gcc "$@"
}
export -f dockerGcc

# The g++ compiler
# TEST: dockerGpp --version
# RUN:  dockerGpp -o myapp myapp.c
dockerGpp() {
  dockerGcc -lstdc++ "$@"
}
export -f dockerGpp

# The deno JS compiler
# TEST: deno --help
# RUN:  denoCompile main.ts
denoCompile() {
  dockerContainer --name deno-compile -p 1993:1993 -e DENO_DIR="/tmp" denoland/deno:debian-1.39.4 compile --unstable --allow-read --allow-env --allow-net "$@"
}
export -f denoCompile

# The deno JS runtime interpreter
# TEST: deno --help
# RUN:  denoRun main.ts
denoRun() {
  dockerContainer --name deno         -p 1993:1993 -e DENO_DIR="/tmp" denoland/deno:debian-1.39.4 run --allow-net "$@"
}
export -f denoRun

# The deno JS formatter
# TEST: deno --help
# RUN:  denoFmt main.ts
denoFmt() {
  dockerContainer --name deno-fmt -p 1993:1993 -e DENO_DIR="/tmp" denoland/deno:debian-1.39.4 fmt "$@"
}
export -f denoFmt

# The deno JS linter
# TEST: deno --help
# RUN:  denoLinter main.ts
denoLinter() {
  dockerContainer --name deno-lint -p 1993:1993 -e DENO_DIR="/tmp" denoland/deno:debian-1.39.4 lint "$@"
}
export -f denoLinter

# The deno JS documentation generator
# TEST: deno --help
# RUN:  denoFmt main.ts
denoDoc() {
  dockerContainer --name deno-doc -p 1993:1993 -e DENO_DIR="/tmp" denoland/deno:debian-1.39.4 doc --private "$@"
}
export -f denoDoc

# Python
# TEST: dockerPython3 --version
# RUN:  dockerPython3 your-daemon-or-script.py
dockerPython3() {
  dockerContainer  --name python3  python:3.11.4-bookworm python "$@"
}
export -f dockerPython3

# PowerShell 
### default --entrypoint /bin/bash, you need to invoke '/usr/bin/pwsh')
# TEST: powershell -Command "Write-Output 'Hello world'"
# RUN:  powershell /path/to/script.ps1
powershell()  {
  dockerContainer --name powershell  --net=host  mcr.microsoft.com/powershell:7.3-debian-bullseye-slim pwsh "$@" 
}
export -f powershell

# node
nodeRun() {
  # Save the first and second parameters
  declare -A headParams
  headParams+=$1
  headParams+=$2

  # Remove the first and second parameters from the parameter list
  shift 2
  
  # Save all other parameters except the first and second
  declare -A tailParams
  tailParams=$@

  dockerContainer   $headParams  node:20.3.1-bookworm $tailParams
}

# node JS
# TEST: node --version
node() {
  nodeRun " --name node "     " "     "$@"
}
export -f node

# npm
# TEST: npm --version
npm() { 
  nodeRun " --name npm "     " --entrypoint /usr/local/bin/npm "  "$@"
}
export -f npm

# Run the hugo docker image
# Test: hugoRun  " -p 1414:1414 " " -p 1515:1515 " "version"
hugoRun() {
  # Save the first and second parameters
  declare -A headParams
  headParams+=$1
  headParams+=$2

  # Remove the first and second parameters from the parameter list
  shift 2
  
  # Save all other parameters except the first and second
  declare -A tailParams
  tailParams=$@

  dockerContainer --name hugo $headParams -p 1313:1313 hugomods/hugo:reg-base-0.127.0 hugo  --noBuildLock $tailParams
}
export -f hugoRun

# Hugo server
# Run: hugoDev
hugoDev() {
  hugoRun " "   " "   server  --bind 0.0.0.0  --logLevel debug --environment mainroad --gc --disableFastRender --ignoreCache --noHTTPCache --renderStaticToDisk "$@"
}
export -f hugoDev

# Hugo works with draft and future posts
# Run: hugoDevDraft
hugoDevDraft() {
  hugoDev --buildDrafts --buildFuture "$@"
}
export -f hugoDevDraft

# Hugo prod
# "$PWD/.."" mount the parent directory, and after select the folder with --source ./codingepaduli
hugoProd() {
  hugoRun " --name hugo-prod "  " -v $PWD/..:/usr/src/SVN2 "  " --environment mainroad " "--source /usr/src/SVN2/codingepaduli" "--destination /usr/src/SVN2/codingepaduli.github.io"
}
export -f hugoProd

# pandoc
# TEST: pandoc --version
pandoc() {
  dockerContainer --name pandoc     -v "$HOME/Sviluppo/SVN2/codingepaduli:/usr/src/myapp/"  -v "$HOME/Sviluppo/SVN2/from-hugo-to-book":/usr/src/luaFilters  pandoc/extra:3.5 "$@" # --fail-if-warnings
}
export -f pandoc

# pandoc Md to pdf
# Test: pandocMdToPdf intro.md
pandocMdToPdf() {
  pandoc --lua-filter=/usr/src/luaFilters/replace_image_source.lua --resource-path=/usr/src/myapp/static --filter pandoc-crossref --from=markdown+yaml_metadata_block --to=latex  --pdf-engine=xelatex  --output file.pdf -V geometry:margin=2cm  --highlight-style=tango "$@"
}
export -f pandocMdToPdf


# uglifyjs .js to .min.js
# Run: uglifyjs --compress --mangle -- input.js
# Test: uglifyjs
uglifyjs() {
  dockerContainer --name uglifyjs      olbat/uglify:2024-09-06 uglifyjs "$@"
}
export -f uglifyjs

# yt-dl
# Test: youTubeDownload URL
youTubeDownload() {
  dockerContainer --name youtube-dl  -e PUID="$UID" -e PGID="$(id -g)"  mikenye/youtube-dl:2023.02.17_linux_amd64  "$@"
}
export -f youTubeDownload

# ImageMagick - convert from pdf to image
#
# On error "operation not allowed by the security policy PDF":
#   Open the file /etc/ImageMagick-6/policy.xml 
#   Replace <policy domain="coder" rights="none" pattern="PDF" />
#   with <policy domain="coder" rights="read|write" pattern="PDF" />
#
# Test: convert -version
# RUN: convert file.pdf file.jpg
convert() {
  dockerContainer --name imagemagick     dpokidov/imagemagick:7.1.1-10-bullseye "$@"
}
export -f convert

# Test: 
# Run: convertAllImages $convertOption40x100
convertAllImages() {

  # nullglob: if there is no file, don't output anything
  # nocaseglob: will match *.jpg, *.JPG, *.Jpg, *.jpeg, *.jPeG, etc
  shopt -s nullglob nocaseglob

  for file in *.jpg *.jpeg *.jfif *.exif *.tif *.tiff *.gif *.bmp *.png *.svg
  do
      convert "$@" "$file" "new-$file"
  done
}
export -f convertAllImages

export convertPdfOptionPageA4White=' -background white -page a4 '
export convertPdfOptionDensity300=' -density 300 -alpha background -alpha off '
export convertOption40x100=' -resize 40% '
export convertOptionGreyscale40x100=' -set colorspace Gray -separate -average -resize 40% '
export convertOptionIncreaseBrightness=' -alpha discrete -channel rgb -evaluate add 5% +channel '
export convertOptionIncreaseContrast=' -contrast '

# xsv
## Test: xsv --version
xsv() { 
  dockerContainer --name xsv   cincan/xsv "$@"
}
export -f xsv

# lampp
## Apache HTTP: http://localhost:41062/www 
## MariaDB: http://localhost:41062/phpmyadmin/
## SSH: ssh root@localhost -p 41061
## Test: lampp --version
xampp() {
  echo "Apache HTTP:  http://localhost:41062/www"
  echo "MariaDB:      http://localhost:41062/phpmyadmin/"
  echo "SSH:          ssh root@localhost -p 41061"
  dockerContainer --name myXampp -u root:root -p 41061:22 -p 41062:80 -v $HOME/lamp/apache/conf.d:/opt/lampp/conf.d -v $HOME/lamp/apache/htdocs:/opt/lampp/htdocs tomsik68/xampp:8.2.4 "$@"
}
export -f xampp
